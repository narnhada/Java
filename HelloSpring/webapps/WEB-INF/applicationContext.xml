<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">
	<!-- 빈 설정:annotation 기반, component-scan 방식 -->
	<context:annotation-config />
	<context:component-scan base-package="com.bitacademy.hellospring.service 
										  com.bitacademy.hellospring.repository" />

	<!-- MySQL DataSource -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource">
		<!-- Pooling 할 드라이버 객체 정보 -->					<!-- Dao에서 connection 필요할때 빌려줌 -->
		<property name="driverClassName"
			value="com.mysql.cj.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3306/webdb?serverTimezone=UTC&amp;
			useSSL=false&amp;
			allowPublicKeyRetrieval=true" />
		<property name="username" value="dev" />
		<property name="password" value="bit39" />
	</bean>

	<!-- sqlSessionFactory -->
	<!-- dataSource를 이곳에 연결 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- Mybatis의 설정 위치를 세팅 -->
		<property name="configLocation"
			value="classpath:mybatis/configuration.xml" />
	</bean>

	<!-- SqlSession 객체 생성 -->
	<!-- sqlSessionFactory를 이곳에 연결 -->
	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">				<!-- 중복 부분을 모듈화 하는 template기법 -->
		<!-- 생성자 호출 -->
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>	
	
	
</beans>
